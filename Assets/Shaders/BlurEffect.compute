#pragma kernel Downscale
#pragma kernel GaussianBlurVertical
#pragma kernel GaussianBlurHorizontal
#pragma kernel BoxBlur

Texture2D<float4> _Source;
RWTexture2D<float4> _Dest;

float _Amount;
float2 _Size;

[numthreads(32,32,1)]
void Downscale(uint3 id : SV_DispatchThreadID)
{
    static const float samples = rcp(_Amount * _Amount);
    const int2 uv = id.xy * _Amount;

    float4 result = 0;
    for (int x = 0; x < _Amount; x++)
    {
        for (int y = 0; y < _Amount; y++)
        {
            result += _Source[uv + int2(x, y)];
        }
    }

    _Dest[id.xy] = result * samples;
}

static const float gaussian_offset[3] = {0.0, 1.3846153846, 3.2307692308};
static const float gaussian_weight[3] = {0.2270270270, 0.3162162162, 0.0702702703};

[numthreads(32,32,1)]
void GaussianBlurVertical(uint3 id : SV_DispatchThreadID)
{
    [branch] if (id.x >= _Size.x || id.y >= _Size.y) return;

    float4 result = _Dest[id.xy] * gaussian_weight[0];

    [unroll] for (int i = 1; i < 3; i++)
    {
        int2 uv = id.xy + int2(0, gaussian_offset[i]);
        if (uv.y < _Size.y)
        {
            result += _Dest[uv] * gaussian_weight[i];
        }
        else
        {
            result += _Dest[id.xy] * gaussian_weight[i];
        }

        uv = id.xy - int2(0, gaussian_offset[i]);
        if (uv.y > 0)
        {
            result += _Dest[uv] * gaussian_weight[i];
        }
        else
        {
            result += _Dest[id.xy] * gaussian_weight[i];
        }
    }

    _Dest[id.xy] = result;
}

[numthreads(32,32,1)]
void GaussianBlurHorizontal(uint3 id : SV_DispatchThreadID)
{
    [branch] if (id.x >= _Size.x || id.y >= _Size.y) return;

    float4 result = _Dest[id.xy] * gaussian_weight[0];

    [unroll] for (int i = 1; i < 3; i++)
    {
        int2 uv = id.xy + int2(gaussian_offset[i], 0);
        if (uv.x < _Size.x)
        {
            result += _Dest[uv] * gaussian_weight[i];
        }
        else
        {
            result += _Dest[id.xy] * gaussian_weight[i];
        }

        uv = id.xy - int2(gaussian_offset[i], 0);
        if (uv.x > 0)
        {
            result += _Dest[uv] * gaussian_weight[i];
        }
        else
        {
            result += _Dest[id.xy] * gaussian_weight[i];
        }
    }

    _Dest[id.xy] = result;
}

[numthreads(32,32,1)]
void BoxBlur(uint3 id : SV_DispatchThreadID)
{
    [branch] if (id.x >= _Size.x || id.y >= _Size.y) return;

    float4 result = 0;
    float count = 0;

    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            const int2 uv = id.xy + int2(x, y);
            if (uv.x < 0 || uv.y < 0 || uv.x >= _Size.x || uv.y >= _Size.y) continue;

            result += _Dest[uv];
            count++;
        }
    }

    _Dest[id.xy] = result * rcp(count);
}
